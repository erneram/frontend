{
  "version": 3,
  "sources": ["../../html-to-pdfmake/index.js"],
  "sourcesContent": ["// source: https://github.com/OpenSlides/OpenSlides/blob/f4f8b8422f9b3fbab58e35ac3f8f870d35813b7d/client/src/app/core/ui-services/html-to-pdf.service.ts\r\n// and https://github.com/bpampuch/pdfmake/issues/205\r\n\r\n/**\r\n  To use it:\r\n  import htmlToPdfMake from 'html-to-pdfmake.js'\r\n  htmlToPdfMake('<b>my bold text</b>');\r\n*/\r\n\r\n/**\r\n * Transform HTML code to a PdfMake object\r\n * @param  {String} htmlText The HTML code to transform\r\n * @param  {Object} [options]\r\n *   @param  {Object} [defaultStyles] An object with the default styles for each elements\r\n *   @param  {Boolean} [tableAutoSize=false] It permits to use the width/height defined in styles for a table's cells and rows\r\n *   @param  {Boolean} [imagesByReference=false] It permits to return two objets ({content, images}) to handle the `<img>` tags by reference\r\n *   @param  {Boolean} [removeExtraBlanks=false] Some blank spaces in your code may cause extra blank lines in the PDF â€“ use this option to remove them\r\n *   @param  {Boolean} [showHidden=false] TRUE if the 'display:none' elements should be displayed\r\n *   @param  {Boolean} [removeTagClasses=false] TRUE if we don't want to have 'html-TAG' added as a class for each node\r\n *   @param  {Array} [ignoreStyles=[]] An array of style property to ignore\r\n *   @param  {Function} [customTag] It permits to handle non-regular HTML tag\r\n *   @param  {Object} [window] The `window` object (required for NodeJS server side use)\r\n * @return {Object} it returns a PdfMake object\r\n *\r\n * @example\r\n * // Some styles are applied by defaults for the supported HTML elements\r\n * // but you can pass your own styles if you prefer\r\n * htmlToPdfMake('<div><h1>My Title</h1><p>My paragraph</p></div>');\r\n *\r\n * // If you want to overwrite the default styles, e.g. you want <li> to not have a margin-left, and links to be 'purple' and not 'blue', and links without 'underline'\r\n * htmlToPdfMake('<ul><li>this is <a href=\"...\">a link</a></li><li>another item</li></ul>', {\r\n *   defaultStyles:{\r\n *     a:{\r\n *       color:'purple',\r\n *       decoration:null\r\n *     },\r\n *     li:null\r\n *   }\r\n * });\r\n */\r\n//var util = require(\"util\"); // to debug\r\nfunction htmlToPdfMake(htmlText, options) {\r\n  'use strict';\r\n  this.wndw = (options && options.window ? options.window : window);\r\n  this.tableAutoSize = (options && typeof options.tableAutoSize === \"boolean\" ? options.tableAutoSize : false);\r\n  this.imagesByReference = (options && typeof options.imagesByReference === \"boolean\" ? options.imagesByReference : false);\r\n  this.removeExtraBlanks = (options && typeof options.removeExtraBlanks === \"boolean\" ? options.removeExtraBlanks : false);\r\n  this.showHidden = (options && typeof options.showHidden === \"boolean\" ? options.showHidden : false);\r\n  this.removeTagClasses = (options && typeof options.removeTagClasses === \"boolean\" ? options.removeTagClasses : false);\r\n  this.ignoreStyles = (options && Array.isArray(options.ignoreStyles) ? options.ignoreStyles : []);\r\n\r\n  // A random string to be used in the image references\r\n  var imagesByReferenceSuffix = (Math.random().toString(36).slice(2,8));\r\n\r\n  // Used with the size attribute on the font elements to calculate relative font size\r\n  this.fontSizes = (options && Array.isArray(options.fontSizes) ? options.fontSizes : [10, 14, 16, 18, 20, 24, 28]);\r\n\r\n  // set default styles\r\n  this.defaultStyles = {\r\n    b: {bold:true},\r\n    strong: {bold:true},\r\n    u: {decoration:'underline'},\r\n    del: {decoration:'lineThrough'},\r\n    s: {decoration: 'lineThrough'},\r\n    em: {italics:true},\r\n    i: {italics:true},\r\n    h1: {fontSize:24, bold:true, marginBottom:5},\r\n    h2: {fontSize:22, bold:true, marginBottom:5},\r\n    h3: {fontSize:20, bold:true, marginBottom:5},\r\n    h4: {fontSize:18, bold:true, marginBottom:5},\r\n    h5: {fontSize:16, bold:true, marginBottom:5},\r\n    h6: {fontSize:14, bold:true, marginBottom:5},\r\n    a: {color:'blue', decoration:'underline'},\r\n    strike: {decoration: 'lineThrough'},\r\n    p: {margin:[0, 5, 0, 10]},\r\n    ul: {marginBottom:5,marginLeft:5},\r\n    table: {marginBottom:5},\r\n    th: {bold:true, fillColor:'#EEEEEE'}\r\n  }\r\n\r\n  // store the references to the images\r\n  this.imagesRef = [];\r\n\r\n  /**\r\n   * Permit to change the default styles based on the options\r\n   */\r\n  this.changeDefaultStyles = function () {\r\n    for (var keyStyle in options.defaultStyles) {\r\n      if (this.defaultStyles.hasOwnProperty(keyStyle)) {\r\n        // if we want to remove a default style\r\n        if (options.defaultStyles.hasOwnProperty(keyStyle) && !options.defaultStyles[keyStyle]) {\r\n          delete this.defaultStyles[keyStyle];\r\n        } else {\r\n          for (var k in options.defaultStyles[keyStyle]) {\r\n            // if we want to delete a specific property\r\n            if (options.defaultStyles[keyStyle][k] === '') delete this.defaultStyles[keyStyle][k];\r\n            else this.defaultStyles[keyStyle][k] = options.defaultStyles[keyStyle][k];\r\n          }\r\n        }\r\n      } else {\r\n        // if we add default styles\r\n        this.defaultStyles[keyStyle] = {}\r\n        for (var ks in options.defaultStyles[keyStyle]) {\r\n          this.defaultStyles[keyStyle][ks] = options.defaultStyles[keyStyle][ks];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (options && options.defaultStyles) {\r\n    this.changeDefaultStyles();\r\n  }\r\n\r\n  /**\r\n   * Takes an HTML string, converts to HTML using a DOM parser and recursivly parses\r\n   * the content into pdfmake compatible doc definition\r\n   *\r\n   * @param htmlText the html text to translate as string\r\n   * @returns pdfmake doc definition as object\r\n   */\r\n  this.convertHtml = function(htmlText) {\r\n    // Create a HTML DOM tree out of html string\r\n    var parser = new this.wndw.DOMParser();\r\n    if (this.removeExtraBlanks) htmlText = htmlText.replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ol|ul|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ol|ul|li))/gi, \"$1$4\").replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ol|ul|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ol|ul|li))/gi, \"$1$4\");\r\n    var parsedHtml = parser.parseFromString(htmlText, 'text/html');\r\n\r\n    var docDef = this.parseElement(parsedHtml.body, []);\r\n\r\n    // remove first level\r\n    return docDef.stack || docDef.text;\r\n  }\r\n\r\n  /**\r\n   * Converts a single HTML element to pdfmake, calls itself recursively for child html elements\r\n   *\r\n   * @param element can be an HTML element (<p>) or plain text (\"Hello World\")\r\n   * @param parentNode the parent node for the current element\r\n   * @param parents Array of node names of all the parents for the element\r\n   * @returns the doc def to the given element in consideration to the given paragraph and styles\r\n   */\r\n  this.parseElement = function(element, parents) {\r\n    var nodeName = element.nodeName.toUpperCase();\r\n    var nodeNameLowerCase = nodeName.toLowerCase();\r\n    var ret = {text:[]};\r\n    var text, needStack=false;\r\n    var dataset, i, key, _this=this;\r\n\r\n    // ignore some HTML tags\r\n    if (['COLGROUP','COL'].indexOf(nodeName) > -1) return '';\r\n\r\n    switch(element.nodeType) {\r\n      case 3: { // TEXT_NODE\r\n        if (element.textContent) {\r\n          text = element.textContent;\r\n          // check if we have 'white-space' in the parent's style\r\n          // or if a parent is a <PRE>\r\n          var styleParentTextNode = this.parseStyle(parents[parents.length-1], true);\r\n          var hasWhiteSpace = (parents.findIndex(function(p) { return p.nodeName === \"PRE\" })>-1);\r\n          for (i=0; i<styleParentTextNode.length; i++) {\r\n            if (styleParentTextNode[i].key === \"preserveLeadingSpaces\") {\r\n              hasWhiteSpace=styleParentTextNode[i].value;\r\n              break;\r\n            }\r\n          }\r\n          // if no 'white-space' style, then deal with white spaces\r\n          if (!hasWhiteSpace) text = text.replace(/\\s*\\n\\s*/g, \" \");\r\n          if (options && typeof options.replaceText === \"function\") text = options.replaceText(text, parents);\r\n\r\n          // for table, thead, tbody, tfoot, tr, ul, ol: remove all empty space\r\n          if (['TABLE','THEAD','TBODY','TFOOT','TR','UL','OL'].indexOf(parents[parents.length-1].nodeName) > -1) text = text.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n          if (text) {\r\n            ret = {'text':text};\r\n            ret = this.applyStyle({ret:ret, parents:parents});\r\n            return ret;\r\n          }\r\n        }\r\n\r\n        return '';\r\n      }\r\n      case 1: { // ELEMENT_NODE\r\n        if (!this.showHidden && (element.style.display && element.style.display === 'none') || (element.style.visibility && element.style.visibility === 'hidden')) {\r\n          return;\r\n        }\r\n\r\n        ret.nodeName = nodeName;\r\n        if (element.id) ret.id = element.id;\r\n        parents.push(element);\r\n\r\n        if (element.childNodes && element.childNodes.length>0) {\r\n          [].forEach.call(element.childNodes, function(child) {\r\n            var res = _this.parseElement(child, parents);\r\n            if (res) {\r\n              if (Array.isArray(res.text) && res.text.length===0) res.text='';\r\n              ret.text.push(res);\r\n            }\r\n          });\r\n          //console.log(nodeName,'=>',util.inspect(ret.text, {showHidden: false, depth: null})); // to debug\r\n          // find if we need a 'stack' instead of a 'text'\r\n          needStack = this.searchForStack(ret);\r\n          if (needStack) {\r\n            ret.stack = ret.text.slice(0);\r\n            delete ret.text;\r\n          } else {\r\n            // apply all the inhirent classes and styles from the parents\r\n            ret = this.applyStyle({ret:ret, parents:parents});\r\n          }\r\n        }\r\n        parents.pop();\r\n\r\n        switch(nodeName) {\r\n          case \"TABLE\":{\r\n            var rowIndex;\r\n            // the format for the table is table.body[[], [], â€¦]\r\n            ret.table = {body:[]};\r\n\r\n            var tbodies = (ret.stack || ret.text);\r\n            if (Array.isArray(tbodies)) {\r\n              rowIndex = 0;\r\n              // Array with All Rows including THEAD\r\n              var hasRowSpan = false; // TRUE if we have some rowspan\r\n              // first round is to deal with colspan\r\n              // for each THEAD / TBODY\r\n              tbodies.forEach(function(tbody) {\r\n                // for each row\r\n                var rows = (tbody.stack || tbody.text);\r\n                if (Array.isArray(rows)) {\r\n                  rows.forEach(function(row) {\r\n                    var cells = (row.stack || row.text);\r\n                    // for each cell\r\n                    if (Array.isArray(cells)) {\r\n                      ret.table.body[rowIndex] = [];\r\n                      cells.forEach(function(cell) {\r\n                        ret.table.body[rowIndex].push(cell);\r\n                        // do we have a colSpan?\r\n                        // if yes, insert empty cells due to colspan\r\n                        if (cell.colSpan>1) {\r\n                          i = cell.colSpan;\r\n                          // insert an empty cell for each colspan\r\n                          while (--i > 0) {\r\n                            ret.table.body[rowIndex].push({text:''});\r\n                          }\r\n                        }\r\n\r\n                        // do we have a rowSpan ?\r\n                        if (cell.rowSpan > 1) hasRowSpan=true;\r\n                      });\r\n                      rowIndex++;\r\n                    }\r\n                 });\r\n                }\r\n              });\r\n\r\n              if (hasRowSpan) {\r\n                var header = ret.table.body[0];\r\n                if (Array.isArray(header)) {\r\n                  // determine the number of columns\r\n                  var columnCount = header.some(function(cell) {\r\n                    return cell.colSpan > 0;\r\n                  })\r\n                  ? header.reduce(function(partialCount, cell) {\r\n                      return partialCount + (cell.colSpan ? cell.colSpan : 0)\r\n                    }, 0)\r\n                  : header.length;\r\n                  // determine the number of rows\r\n                  var rowCount = ret.table.body.length;\r\n\r\n                  // for each column\r\n                  for (var columnInd=0; columnInd<columnCount; columnInd++) {\r\n                    for (var rowInd=0; rowInd<rowCount; rowInd++) {\r\n                      var row = ret.table.body[rowInd];\r\n                      if (Array.isArray(row)) {\r\n                        var cell = row[columnInd];\r\n                        // do we have a rowSpan?\r\n                        if (cell.rowSpan>1) {\r\n                          var len = cell.rowSpan;\r\n                          var cs, colspan = (cell.colSpan ? cell.colSpan : 1);\r\n                          for (var j=1; j<=len-1; j++) {\r\n                            cs = colspan;\r\n                            if (ret.table.body[rowInd+j]) {\r\n                              while (cs--) ret.table.body[rowInd+j].splice(columnInd, 0, {text:''});\r\n                            } else {\r\n                              // if we have an empty <tr></tr>\r\n                              cell.rowSpan--;\r\n                            }\r\n                          }\r\n                          // increase rowInd to skip processed rows\r\n                          rowInd += (len-1);\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n\r\n            // if option tableAutoSize, then we try to apply the correct width/height on the table\r\n            if (this.tableAutoSize) {\r\n              var cellsWidths = [];\r\n              var cellsHeights = [];\r\n              var tableWidths = [];\r\n              var tableHeights = [];\r\n\r\n              // determine if we have \"width:100%\" on the TABLE\r\n              var fullWidth = (element.getAttribute(\"width\") === \"100%\" || element.style.width === \"100%\");\r\n\r\n              // remove everything from percent string except numbers and dot\r\n              var elementAttrWidth = element.getAttribute( \"width\" )||\"\";\r\n              // check if table have width defined\r\n              var tableHaveWidth = (element.style.width||elementAttrWidth).endsWith(\"%\");\r\n              if ( tableHaveWidth ) {\r\n                // get only numbers of percentage\r\n                var tableWidth = (element.style.width||elementAttrWidth).replace( /[^0-9.]/g, \"\" );\r\n              }\r\n\r\n              var tableHaveColgroup = false;\r\n              var tableColgroupIndex = -1;\r\n              // check if any of table children is a colgroup with cells widths\r\n              for ( var x = 0; x < element.children.length; x++ ) {\r\n                var child = element.children[x];\r\n                if ( !tableHaveColgroup ) tableColgroupIndex++;\r\n                if ( child.nodeName.toUpperCase() === \"COLGROUP\" ) tableHaveColgroup = true;\r\n              };\r\n\r\n              ret.table.body.forEach(function(row, rowIndex) {\r\n                cellsWidths.push([]);\r\n                cellsHeights.push([]);\r\n                row.forEach(function(cell, cellIndex) {\r\n                  // we want to remember the different sizes\r\n                  var width = typeof cell.width !== 'undefined' ? cell.width : 'auto';\r\n                  if (width === '*') width='auto'; // tinymce could generate 'width:*', but it's invalid, so we use 'auto' instead\r\n                  var height = typeof cell.height !== 'undefined' ? cell.height : 'auto';\r\n                  if (height === '*') height='auto'; // tinymce could generate 'height:*', but it's invalid, so we use 'auto' instead\r\n                  // check if we have colspan or rowspan\r\n                  // if yes, and if width/height is a number, we divide by the col/rowspan, otherwise we use 'auto'\r\n                  if (width !== 'auto' && cell.colSpan>1) {\r\n                    if (!isNaN(width)) width /= cell.colSpan;\r\n                    else width = 'auto';\r\n                  }\r\n                  if (height !== 'auto' && cell.rowSpan>1) {\r\n                    if (!isNaN(height)) height /= cell.rowSpan;\r\n                    else height = 'auto';\r\n                  }\r\n\r\n                  // if we have colgroups defining cells widths\r\n                  if ( tableHaveColgroup ) {\r\n                    var colGroups = element.children[ tableColgroupIndex ];\r\n                    // get colgroup by cell index\r\n                    var colElement = colGroups.children[ cellIndex ];\r\n                    var colAttrWidth = colElement.getAttribute( \"width\" ) || \"\";\r\n                    var colStyleWidth = colElement.style.width;\r\n\r\n                    if ((colAttrWidth||colStyleWidth).endsWith(\"%\")) {\r\n                      // update cell width to its percentage in colgroup\r\n                      width = (colAttrWidth||colStyleWidth);\r\n                    }\r\n                  }\r\n\r\n                  cellsWidths[rowIndex].push(width);\r\n                  cellsHeights[rowIndex].push(height);\r\n                });\r\n              });\r\n\r\n              // determine the max width for each cell\r\n              cellsWidths.forEach(function(row) {\r\n                row.forEach(function(cellWidth, cellIndex) {\r\n                  var type = typeof tableWidths[cellIndex];\r\n                  if (type === \"undefined\" || (cellWidth !== 'auto' && type === \"number\" && cellWidth > tableWidths[cellIndex]) || (cellWidth !== 'auto' && tableWidths[cellIndex] === 'auto')) {\r\n                    if ( tableHaveWidth ) {\r\n                      // if table have defined widths we need to make a \r\n                      // rule of three to get cell's proportional width\r\n                      var cellPercentage = cellWidth === 'auto' ? tableWidth / row.length : ( cellWidth.toString().replace( '%', \"\" ) * tableWidth ) / 100;\r\n                      cellWidth = String(cellPercentage) + \"%\";\r\n                    }\r\n\r\n                    tableWidths[cellIndex] = cellWidth;\r\n                  }\r\n                });\r\n              });\r\n              // determine the max height for each row\r\n              cellsHeights.forEach(function(row, rowIndex) {\r\n                row.forEach(function(cellHeight) {\r\n                  var type = typeof tableHeights[rowIndex];\r\n                  if (type === \"undefined\" || (cellHeight !== 'auto' && type === \"number\" && cellHeight > tableHeights[rowIndex]) || (cellHeight !== 'auto' && tableHeights[rowIndex] === 'auto')) {\r\n                    tableHeights[rowIndex] = cellHeight;\r\n                  }\r\n                });\r\n              });\r\n              if (tableWidths.length > 0) {\r\n                // if all columns are in 'auto' and if we have 'width:\"100%\"' for the table\r\n                // then put widths:['*', '*' â€¦], for all columns\r\n                //if (fullWidth && tableWidths.filter(function(w) { return w==='auto' }).length === tableWidths.length) tableWidths=tableWidths.map(function() { return '*' });\r\n                // see https://github.com/Aymkdn/html-to-pdfmake/issues/151#issuecomment-1273015585\r\n                // if we have 'width:\"100%\"' for the table, replace \"auto\" width to \"*\"\r\n                if (fullWidth) tableWidths=tableWidths.map(function(w) { return w==='auto' ? '*' : w });\r\n                ret.table.widths = tableWidths;\r\n              }\r\n              if (tableHeights.length > 0) ret.table.heights = tableHeights;\r\n            }\r\n\r\n            // check if we have some data-pdfmake to apply\r\n            if (element.dataset && element.dataset.pdfmake) {\r\n              // handle when people will use simple quotes, e.g. <table data-pdfmake=\"{'layout':'noBorders'}\">\r\n              dataset = element.dataset.pdfmake;\r\n              if (dataset.charAt(1) === \"'\") dataset=dataset.replace(/'/g,'\"');\r\n              try {\r\n                dataset = JSON.parse(dataset);\r\n                for (key in dataset) {\r\n                  if (key === \"layout\") {\r\n                    ret.layout = dataset[key];\r\n                  } else {\r\n                    ret.table[key] = dataset[key];\r\n                  }\r\n                }\r\n              } catch(e) {\r\n                console.error(e);\r\n              }\r\n            }\r\n            break;\r\n          }\r\n          case \"TH\":\r\n          case \"TD\":{\r\n            if (element.getAttribute(\"rowspan\")) ret.rowSpan = element.getAttribute(\"rowspan\")*1;\r\n            if (element.getAttribute(\"colspan\")) ret.colSpan = element.getAttribute(\"colspan\")*1;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            break;\r\n          }\r\n          case \"SVG\": {\r\n            ret = {\r\n              svg:element.outerHTML.replace(/\\n(\\s+)?/g, \"\"),\r\n              nodeName:'SVG'\r\n            }\r\n            if (!this.removeTagClasses) ret.style=['html-svg'];\r\n            break;\r\n          }\r\n          case \"BR\": {\r\n            // for BR we return '\\n'\r\n            ret.text = [{text:'\\n'}];\r\n            break;\r\n          }\r\n          case \"SUB\":\r\n          case \"SUP\": {\r\n            ret[nodeName.toLowerCase()] = { offset: '30%', fontSize: 8 };\r\n            break;\r\n          }\r\n          case \"HR\": {\r\n            // default style for the HR\r\n            var styleHR = {\r\n              width: 514,\r\n              type: \"line\",\r\n              margin: [0, 12, 0, 12],\r\n              thickness: 0.5,\r\n              color: \"#000000\",\r\n              left: 0\r\n            };\r\n            // we can override the default HR style with \"data-pdfmake\"\r\n            if (element.dataset && element.dataset.pdfmake) {\r\n              dataset = JSON.parse(element.dataset.pdfmake);\r\n              for (key in dataset) {\r\n                styleHR[key] = dataset[key];\r\n              }\r\n            }\r\n\r\n            ret.margin = styleHR.margin;\r\n            ret.canvas = [\r\n              {\r\n                type: styleHR.type,\r\n                x1: styleHR.left,\r\n                y1: 0,\r\n                x2: styleHR.width,\r\n                y2: 0,\r\n                lineWidth: styleHR.thickness,\r\n                lineColor: styleHR.color\r\n              }\r\n            ];\r\n            delete ret.text;\r\n\r\n            break;\r\n          }\r\n          case \"OL\":\r\n          case \"UL\": {\r\n            ret[nodeNameLowerCase] = (ret.stack || ret.text).slice(0);\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            // check if we have `start`\r\n            if (element.getAttribute(\"start\")) {\r\n              ret.start = element.getAttribute(\"start\")*1;\r\n            }\r\n            // check if we have \"type\"\r\n            switch (element.getAttribute(\"type\")) {\r\n              case 'A': ret.type = 'upper-alpha'; break;\r\n              case 'a': ret.type = 'lower-alpha'; break;\r\n              case 'I': ret.type = 'upper-roman'; break;\r\n              case 'i': ret.type = 'lower-roman'; break;\r\n            }\r\n\r\n            // check if we have `list-style-type` or `list-style`\r\n            if (ret.listStyle || ret.listStyleType) ret.type = ret.listStyle || ret.listStyleType;\r\n            break;\r\n          }\r\n          case \"LI\": {\r\n            // if it's a stack, then check if the last child has a \"text\"\r\n            if (ret.stack && !ret.stack[ret.stack.length-1].text) {\r\n              // if not, we restructure our node\r\n              text = ret.stack.slice(0, -1);\r\n              ret = [\r\n                (Array.isArray(text) ? {\"stack\": text} : {\"text\": text}),\r\n                ret.stack[ret.stack.length-1]\r\n              ];\r\n            }\r\n            // we don't want a child of UL/OL to be an array, but it should be a \"stack\"\r\n            if (Array.isArray(ret)) {\r\n              ret = {stack:ret};\r\n            }\r\n            break;\r\n          }\r\n          case \"PRE\":{\r\n            ret.preserveLeadingSpaces = true;\r\n            break;\r\n          }\r\n          case \"IMG\": {\r\n            if (this.imagesByReference) {\r\n              var src = element.getAttribute(\"data-src\") || element.getAttribute(\"src\");\r\n              var index = this.imagesRef.indexOf(src);\r\n              if (index>-1) ret.image = 'img_ref_'+imagesByReferenceSuffix+index;\r\n              else {\r\n                ret.image = 'img_ref_'+imagesByReferenceSuffix+this.imagesRef.length;\r\n                this.imagesRef.push(src);\r\n              }\r\n            } else {\r\n              ret.image = element.getAttribute(\"src\");\r\n            }\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            break;\r\n          }\r\n          case \"A\": {\r\n            // the link must be applied to the deeper `text` or stacked element (e.g. `image`)\r\n            var setLink = function(pointer, href) {\r\n              pointer = pointer || {text:''}; // for link without any text\r\n              if (Array.isArray(pointer.text)) {\r\n                pointer.text = pointer.text.map(function(text) {\r\n                  return setLink(text, href);\r\n                });\r\n                return pointer;\r\n              } else if (Array.isArray(pointer.stack)) {\r\n                // if we have a more complex layer\r\n                pointer.stack = pointer.stack.map(function(stack) {\r\n                  return setLink(stack, href);\r\n                });\r\n                return pointer;\r\n              }\r\n              // if 'href' starts with '#' then it's an internal link\r\n              if (href.indexOf('#') === 0) pointer.linkToDestination=href.slice(1);\r\n              else pointer.link = href;\r\n              return pointer;\r\n            }\r\n            if (element.getAttribute(\"href\")) {\r\n              ret = setLink(ret, element.getAttribute(\"href\"));\r\n              // reduce the complexity when only 1 text\r\n              if (Array.isArray(ret.text) && ret.text.length === 1) ret = ret.text[0];\r\n              ret.nodeName = \"A\";\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            // handle other cases\r\n            if (nodeName === \"DIV\" && element.dataset && element.dataset.pdfmakeType === \"columns\") {\r\n              // if it's a <DIV> with data-pdfmake-type=\"columns\"\r\n              // then we interpret it as the COLUMNS in PDFMake\r\n              if (ret.stack) {\r\n                ret.columns = ret.stack;\r\n                delete ret.stack;\r\n              }\r\n            } else if (options && typeof options.customTag === \"function\") {\r\n              // handle custom tags\r\n              ret = options.customTag.call(this, {element:element, parents:parents, ret:ret});\r\n            }\r\n          }\r\n        }\r\n\r\n        // reduce the number of JSON properties\r\n        if (Array.isArray(ret.text) && ret.text.length === 1 && ret.text[0].text && !ret.text[0].nodeName) {\r\n          ret.text = ret.text[0].text;\r\n        }\r\n\r\n        // check if we have some data-pdfmake to apply\r\n        if (['HR','TABLE'].indexOf(nodeName) === -1 && element.dataset && element.dataset.pdfmake) {\r\n          dataset = JSON.parse(element.dataset.pdfmake);\r\n          for (key in dataset) {\r\n            ret[key] = dataset[key];\r\n          }\r\n        }\r\n\r\n        return ret;\r\n      }\r\n    }\r\n  }\r\n\r\n  this.searchForStack = function(ret) {\r\n    if (Array.isArray(ret.text)) {\r\n      for (var i=0; i<ret.text.length; i++) {\r\n        if (ret.text[i].stack || ['P','DIV','TABLE','SVG','UL','OL','IMG','H1','H2','H3','H4','H5','H6'].indexOf(ret.text[i].nodeName) > -1) return true;\r\n        if (this.searchForStack(ret.text[i]) === true) return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Apply style and classes from all the parents\r\n   *\r\n   * @param  {Object} params\r\n   *   @param {Object} ret The object that will receive the 'style' and other properties\r\n   *   @param {Array} parents Array of node elements\r\n   * @return {Object} the modified 'ret'\r\n   */\r\n  this.applyStyle = function(params) {\r\n    var cssClass = [];\r\n    var lastIndex = params.parents.length-1;\r\n    var _this = this;\r\n    params.parents.forEach(function(parent, parentIndex) {\r\n      // classes\r\n      var parentNodeName = parent.nodeName.toLowerCase();\r\n      if (!_this.removeTagClasses) {\r\n        var htmlClass = 'html-' + parentNodeName;\r\n        if (htmlClass !== 'html-body' && cssClass.indexOf(htmlClass) === -1) cssClass.unshift(htmlClass);\r\n      }\r\n      var parentClass = (parent.getAttribute(\"class\")||\"\").split(' ');\r\n      parentClass.forEach(function(p) {\r\n        if (p) cssClass.push(p);\r\n      });\r\n      // styles\r\n      var style;\r\n      // not all the CSS properties should be inherent\r\n      var ignoreNonDescendentProperties = (parentIndex!==lastIndex);\r\n      // 1) the default styles\r\n      if (_this.defaultStyles[parentNodeName]) {\r\n        for (style in _this.defaultStyles[parentNodeName]) {\r\n          if (_this.defaultStyles[parentNodeName].hasOwnProperty(style)) {\r\n            if (!ignoreNonDescendentProperties ||\r\n                (ignoreNonDescendentProperties &&\r\n                  style.indexOf('margin') === -1 &&\r\n                  style.indexOf('border') === -1\r\n                )\r\n               ) {\r\n              // 'decoration' can be an array\r\n              if (style === 'decoration') {\r\n                if (!Array.isArray(params.ret[style])) params.ret[style]=[];\r\n                // do not apply twice the same (e.g. applying 2 \"underline\" will cause an extra blank space with an underline)\r\n                if (params.ret[style].indexOf(_this.defaultStyles[parentNodeName][style]) === -1) {\r\n                  params.ret[style].push(_this.defaultStyles[parentNodeName][style]);\r\n                }\r\n              } else {\r\n                params.ret[style] = JSON.parse(JSON.stringify(_this.defaultStyles[parentNodeName][style]));\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // 2) element's style\r\n      // we want TD/TH to receive descendant properties from TR\r\n      if (parentNodeName === 'tr') ignoreNonDescendentProperties=false;\r\n      style = _this.parseStyle(parent, ignoreNonDescendentProperties);\r\n      style.forEach(function(stl) {\r\n        // 'decoration' can be an array\r\n        if (stl.key === \"decoration\") {\r\n          if (!Array.isArray(params.ret[stl.key])) params.ret[stl.key]=[];\r\n          params.ret[stl.key].push(stl.value);\r\n        } else {\r\n          // when 'params.ret.margin' is defined but also a 'marginXYZ' is defined in `stl.key`,\r\n          // then we should change the correct index in `params.ret.margin` to reflect it\r\n          if (params.ret.margin && stl.key.indexOf('margin') === 0) {\r\n            // order: left | top | right | bottom\r\n            switch(stl.key) {\r\n              case \"marginLeft\": params.ret.margin[0]=stl.value; break;\r\n              case \"marginTop\": params.ret.margin[1]=stl.value; break;\r\n              case \"marginRight\": params.ret.margin[2]=stl.value; break;\r\n              case \"marginBottom\": params.ret.margin[3]=stl.value; break;\r\n            }\r\n          } else {\r\n            params.ret[stl.key] = stl.value;\r\n          }\r\n        }\r\n      });\r\n    });\r\n    if (cssClass.length>0) params.ret.style = cssClass;\r\n    return params.ret;\r\n  }\r\n\r\n  /**\r\n   * Border Value Rearrange a CSS expression (e.g. 'border:solid 10px red' to 'border:10px solid red')\r\n   *\r\n   * @param {String} styleStr The CSS expression values\r\n   * @returns {String} border value in global accepted format (e.g. 'border:10px solid red')\r\n   */\r\n  this.borderValueRearrange = function(styleStr) {\r\n    try {\r\n      var styleArray = styleStr.split(' ');\r\n      if (styleArray.length!==3) return styleStr;\r\n      var v1 = \"0px\", v2 = \"none\", v3 = \"transparent\";\r\n      var style = [\"dotted\", \"dashed\", \"solid\", \"double\", \"groove\", \"ridge\", \"inset\", \"outset\", \"none\", \"hidden\", \"mix\"];\r\n      styleArray.forEach(function (v) {\r\n        if (v.match(/^\\d/)) {\r\n          v1 = v;\r\n        } else if (style.indexOf(v) > -1) {\r\n          v2 = v;\r\n        } else {\r\n          v3 = v;\r\n        }\r\n      });\r\n      return v1 + ' ' + v2 + ' ' + v3;\r\n    } catch (e) {\r\n      return styleStr;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transform a CSS expression (e.g. 'margin:10px') in the PDFMake version\r\n   *\r\n   * @param {String} style The CSS expression to transform\r\n   * @param {DOMElement} element\r\n   * @param {Boolean} ignoreProperties TRUE when we have to ignore some properties, like border, padding, margin\r\n   * @returns {Array} array of {key, value}\r\n   */\r\n  this.parseStyle = function(element, ignoreProperties) {\r\n    var style = element.getAttribute(\"style\") || \"\";\r\n    var ret = [];\r\n    style = style.replace(/!important/g, '').split(';');\r\n    // check if we have \"width\" or \"height\"\r\n    var width = element.getAttribute(\"width\");\r\n    var height = element.getAttribute(\"height\");\r\n    if (width) {\r\n      style.unshift(\"width:\" + this.convertToUnit(width + (isNaN(width) ? \"\" : \"px\")));\r\n    }\r\n    if (height) {\r\n      style.unshift(\"height:\" + this.convertToUnit(height + (isNaN(height) ? \"\" : \"px\")));\r\n    }\r\n    // check if we have 'color' or 'size' -- mainly for '<font>'\r\n    var color = element.getAttribute(\"color\");\r\n    if (color) {\r\n      ret.push({key:\"color\", value:this.parseColor(color).color});\r\n    }\r\n    var size = element.getAttribute(\"size\");\r\n    if (size !== null) {\r\n      // Getting and sanitizing the size value: it should be included between 1 and 7\r\n      size = Math.min(Math.max(1, parseInt(size)), 7);\r\n      // Assigning the font size\r\n      ret.push({key:'fontSize', value:Math.max(this.fontSizes[0], this.fontSizes[size - 1])});\r\n    }\r\n\r\n    var styleDefs = style.map(function(style) { return style.toLowerCase().split(':') });\r\n    var borders = []; // special treatment for borders\r\n    var nodeName = element.nodeName.toUpperCase();\r\n    var _this=this;\r\n    styleDefs.forEach(function(styleDef) {\r\n      if (styleDef.length===2) {\r\n        var key = styleDef[0].trim().toLowerCase();\r\n        var value = styleDef[1].trim();\r\n        var res;\r\n        if (_this.ignoreStyles.indexOf(key) === -1) {\r\n          switch (key) {\r\n            case \"margin\": {\r\n              if (ignoreProperties) break;\r\n              // pdfMake uses a different order than CSS\r\n              value = value.split(' ');\r\n              if (value.length===1) value=[value[0], value[0], value[0], value[0]];\r\n              else if (value.length===2) value=[value[1], value[0]]; // vertical | horizontal ==> horizontal | vertical\r\n              else if (value.length===3) value=[value[1], value[0], value[1], value[2]]; // top | horizontal | bottom ==> left | top | right | bottom\r\n              else if (value.length===4) value=[value[3], value[0], value[1], value[2]]; // top | right | bottom | left ==> left | top | right | bottom\r\n\r\n              // we now need to convert to PT\r\n              value.forEach(function(val, i) {\r\n                value[i] = _this.convertToUnit(val);\r\n              });\r\n              // ignore if we have a FALSE in the table\r\n              if (value.indexOf(false) === -1) ret.push({key:key, value:value});\r\n              break;\r\n            }\r\n            case \"line-height\": {\r\n              // change % unit\r\n              if (typeof value === \"string\" && value.slice(-1) === '%') {\r\n                value = value.slice(0,-1) / 100;\r\n              } else {\r\n                value = _this.convertToUnit(value);\r\n              }\r\n              ret.push({key:\"lineHeight\", value:value});\r\n              break;\r\n            }\r\n            case \"text-align\": {\r\n              ret.push({key:\"alignment\", value:value});\r\n              break;\r\n            }\r\n            case \"font-weight\": {\r\n              if (value === \"bold\") ret.push({key:\"bold\", value:true});\r\n              break;\r\n            }\r\n            case \"text-decoration\": {\r\n              // verify the value is valid\r\n              value = _this.toCamelCase(value);\r\n              if ([\"underline\", \"lineThrough\", \"overline\"].includes(value)) {\r\n                ret.push({key:\"decoration\", value:value})\r\n              }\r\n              break;\r\n            }\r\n            case \"font-style\": {\r\n              if (value===\"italic\") ret.push({key:\"italics\", value:true});\r\n              break;\r\n            }\r\n            case \"font-family\": {\r\n              ret.push({\r\n                key: \"font\", value: value.split(',')[0].replace(/\"|^'|^\\s*|\\s*$|'$/g, \"\").replace(/^([a-z])/g, function (g) {\r\n                  return g[0].toUpperCase();\r\n                }).replace(/ ([a-z])/g, function (g) {\r\n                  return g[1].toUpperCase();\r\n                })\r\n              });\r\n              break;\r\n            }\r\n            case \"color\": {\r\n              res = _this.parseColor(value);\r\n              ret.push({key:\"color\", value:res.color});\r\n              if (res.opacity < 1) ret.push({key:\"opacity\", value:res.opacity});\r\n              break;\r\n            }\r\n            case \"background-color\": {\r\n              // if TH/TD and key is 'background', then we use 'fillColor' instead\r\n              res = _this.parseColor(value);\r\n              ret.push({key:(nodeName === 'TD' || nodeName === 'TH' ? \"fillColor\" : \"background\"), value:res.color});\r\n              if (res.opacity < 1) ret.push({key:(nodeName === 'TD' || nodeName === 'TH' ? \"fillOpacity\" : \"opacity\"), value:res.opacity});\r\n              break;\r\n            }\r\n            case \"text-indent\": {\r\n              ret.push({key:\"leadingIndent\", value:_this.convertToUnit(value)});\r\n              break;\r\n            }\r\n            case \"white-space\": {\r\n              if (value==='nowrap') {\r\n                ret.push({key:\"noWrap\", value:true});\r\n              } else {\r\n                ret.push({key:\"preserveLeadingSpaces\", value:(value==='break-spaces' || value.slice(0,3) === 'pre')});\r\n              }\r\n              break;\r\n            }\r\n            default: {\r\n              // for borders\r\n              if (key === 'border' || key.indexOf('border-left') === 0 || key.indexOf('border-top') === 0 || key.indexOf('border-right') === 0 || key.indexOf('border-bottom') === 0) {\r\n                if (!ignoreProperties) borders.push({key:key, value:value});\r\n              } else {\r\n                // ignore some properties\r\n                if (ignoreProperties && (key.indexOf(\"margin-\") === 0 || key === 'width' || key === 'height')) break;\r\n                // for IMG only (see issue #181)\r\n                if (nodeName === \"IMG\" && (key === 'width' || key === 'height')) {\r\n                  ret.push({key:key, value: _this.convertToUnit(value)});\r\n                  break;\r\n                }\r\n\r\n                // padding is not supported by PDFMake\r\n                if (key.indexOf(\"padding\") === 0) break;\r\n                if (key.indexOf(\"-\") > -1) key=_this.toCamelCase(key);\r\n                if (value) {\r\n                  // convert value to a 'pt' when possible\r\n                  var parsedValue = _this.convertToUnit(value);\r\n                  // if we have 'font-size' with a parsedValue at false, then ignore it\r\n                  if (key === 'font-size' && parsedValue === false) break;\r\n                  ret.push({key:key, value:(parsedValue === false ? value : parsedValue)});\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    // for borders\r\n    if (borders.length > 0) {\r\n      // we have to merge together the borders in two properties\r\n      var border = []; // array of boolean\r\n      var borderColor = []; // array of colors\r\n      borders.forEach(function(b) {\r\n        // we have 3 properties: width style color\r\n        b.value = _this.borderValueRearrange(b.value);\r\n        var properties = b.value.split(' ');\r\n        var width = properties[0].replace(/(\\d*)(\\.\\d+)?([^\\d]+)/g,\"$1$2 \").trim();\r\n        var index = -1, i;\r\n        if (b.key.indexOf('-left') > -1) index=0;\r\n        else if (b.key.indexOf('-top') > -1) index=1;\r\n        else if (b.key.indexOf('-right') > -1) index=2;\r\n        else if (b.key.indexOf('-bottom') > -1) index=3;\r\n        // for the width\r\n        if (index > -1) {\r\n          border[index] = (width > 0);\r\n        } else {\r\n          for (i=0; i<4; i++) border[i] = (width > 0);\r\n        }\r\n        // for the color\r\n        if (properties.length > 2) {\r\n          var color = properties.slice(2).join(' ');\r\n          if (index > -1) {\r\n            borderColor[index] = _this.parseColor(color).color;\r\n          } else {\r\n            for (i=0; i<4; i++) borderColor[i] = _this.parseColor(color).color;\r\n          }\r\n        }\r\n      });\r\n      // fill the gaps\r\n      for (var i=0; i<4; i++) {\r\n        if (border.length > 0 && typeof border[i] === \"undefined\") border[i]=true;\r\n        if (borderColor.length > 0 && typeof borderColor[i] === \"undefined\") borderColor[i]='#000000';\r\n      }\r\n      if (border.length > 0) ret.push({key:'border', value:border});\r\n      if (borderColor.length > 0) ret.push({key:'borderColor', value:borderColor});\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  this.toCamelCase = function(str) {\r\n    return str.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase() });\r\n  }\r\n\r\n  // input: h in [0,360] and s,v in [0,1] - output: \"rgb(0â€“255,0â€“255,0â€“255)\"\"\r\n  // source: https://stackoverflow.com/a/54014428/1134119 + https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion#comment58413965_9493060\r\n  this.hsl2rgb = function(h,s,l) {\r\n    var a = s*Math.min(l,1-l);\r\n    var f = function(n) {\r\n      var k=(n+h/30)%12;\r\n      return Math.min(Math.floor((l - a*Math.max(Math.min(k-3,9-k,1),-1))*256),255);\r\n    }\r\n    return \"rgb(\"+f(0)+\",\"+f(8)+\",\"+f(4)+\")\";\r\n  }\r\n\r\n  /**\r\n   * Returns the color in a hex format (e.g. #12ff00).\r\n   * Also tries to convert RGB colors into hex values\r\n   *\r\n   * @param color color as string representation\r\n   * @returns {color (as hex values for pdfmake), opacity}\r\n   */\r\n  this.parseColor = function(color) {\r\n    var opacity = 1;\r\n    // e.g. `#fff` or `#ff0048`\r\n    var haxRegex = new RegExp('^#([0-9a-f]{3}|[0-9a-f]{6})$', 'i');\r\n\r\n    // e.g. rgb(0,255,34) or rgb(22, 0, 0) or rgb(100%, 100%, 100%) or rgba(0,125,250,0.8)\r\n    var rgbRegex = /^rgba?\\(\\s*(\\d+(\\.\\d+)?%?),\\s*(\\d+(\\.\\d+)?%?),\\s*(\\d+(\\.\\d+)?%?)(,\\s*\\d+(\\.\\d+)?)?\\)$/;\r\n\r\n    // e.g. hsl(300, 10%, 20%)\r\n    var hslRegex = new RegExp('^hsl\\\\((\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?)\\\\)$');\r\n\r\n    // e.g. \"white\" or \"red\"\r\n    var nameRegex = new RegExp('^[a-z]+$', 'i');\r\n\r\n    var decimalColors, decimalValue, hexString, ret=[];\r\n    if (haxRegex.test(color)) {\r\n      return {color:color, opacity:opacity};\r\n    }\r\n\r\n    if (hslRegex.test(color)) {\r\n      // we want to convert to RGB\r\n      decimalColors = hslRegex.exec(color).slice(1);\r\n      // first value should be from 0 to 360\r\n      if (decimalColors[0].endsWith('%')) decimalValue = decimalColors[0].slice(0,-1) * 360 / 100;\r\n      else decimalValue = decimalColors[0]*1;\r\n      ret.push(decimalValue);\r\n      // next values should be % to convert to base 1\r\n      ret.push(decimalColors[2].slice(0,-1) / 100);\r\n      ret.push(decimalColors[4].slice(0,-1) / 100);\r\n      color = this.hsl2rgb(ret[0], ret[1], ret[2]);\r\n      ret = [];\r\n    }\r\n    if (rgbRegex.test(color)) {\r\n      decimalColors = rgbRegex.exec(color).slice(1).filter(function(v,i) {\r\n        return i%2===0 && typeof v !== \"undefined\";\r\n      });\r\n\r\n      decimalColors.forEach(function(decimalValue, i) {\r\n        // for the alpha number\r\n        if (i === 3) {\r\n          opacity = decimalValue.slice(1)*1;\r\n        } else {\r\n          // if it ends with '%', we calculcate based on 100%=255\r\n          if (decimalValue.endsWith('%')) {\r\n            decimalValue = Math.round(decimalValue.slice(0,-1) * 255 / 100);\r\n          } else decimalValue = decimalValue*1;\r\n          if (decimalValue > 255) {\r\n            decimalValue = 255;\r\n          }\r\n          hexString = '0' + decimalValue.toString(16);\r\n          hexString = hexString.slice(-2);\r\n          ret.push(hexString);\r\n        }\r\n      })\r\n      return {color:'#' + ret.join(''), opacity:opacity};\r\n    }\r\n    if (nameRegex.test(color)) return {color:color, opacity:opacity};\r\n\r\n    console.error('Could not parse color \"' + color + '\"');\r\n    return {color:color, opacity:opacity};\r\n  }\r\n\r\n  /**\r\n   * Convert 'px'/'rem'/'cm'/'em'/'in' to 'pt', and return false for the other ones. If it's only a number, it will just return it\r\n   *\r\n   * @param  {String} val The value with units (e.g. 12px)\r\n   * @return {Number|Boolean} Return the pt value, or false\r\n   */\r\n  this.convertToUnit = function(val) {\r\n    // if it's just a number, then return it\r\n    if (!isNaN(parseFloat(val)) && isFinite(val)) return val*1;\r\n    var mtch = (val+\"\").trim().match(/^(\\d*(\\.\\d+)?)(pt|px|r?em|cm|in)$/);\r\n    // if we don't have a number with supported units, then return false\r\n    if (!mtch) return false;\r\n    val = mtch[1];\r\n    switch(mtch[3]) {\r\n      case 'px':{\r\n        val = Math.round(val * 0.75292857248934); // 1px => 0.75292857248934pt\r\n        break;\r\n      }\r\n      case 'em':\r\n      case 'rem':{\r\n        val *= 12; // default font-size is 12pt\r\n        break;\r\n      }\r\n      case 'cm':{\r\n        val = Math.round(val * 28.34646); // 1cm => 28.34646\r\n        break;\r\n      }\r\n      case 'in':{\r\n        val *= 72; // 1in => 72 pt\r\n        break;\r\n      }\r\n    }\r\n    return val*1;\r\n  }\r\n\r\n  var result = this.convertHtml(htmlText);\r\n  // if we only pass a string without HTML code\r\n  if (typeof result === \"string\") result={text:result};\r\n  // if images by reference\r\n  if (this.imagesByReference) {\r\n    result = {content:result, images:{}};\r\n    this.imagesRef.forEach(function(src, i) {\r\n      // check if 'src' is a JSON string\r\n      result.images['img_ref_'+imagesByReferenceSuffix+i] = (src.startsWith(\"{\") ? JSON.parse(src) : src);\r\n    });\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = function(htmlText, options) {\r\n  return new htmlToPdfMake(htmlText, options);\r\n}\r\n"],
  "mappings": "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",
  "names": ["htmlText", "child", "row", "cell", "rowIndex", "text", "style", "i", "width", "color", "decimalValue"]
}
